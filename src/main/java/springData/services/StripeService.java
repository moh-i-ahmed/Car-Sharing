package springData.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.stripe.Stripe;
import com.stripe.exception.CardException;
import com.stripe.exception.StripeException;
import com.stripe.model.Card;
import com.stripe.model.Charge;
import com.stripe.model.Customer;
import com.stripe.model.PaymentIntent;
import com.stripe.model.PaymentMethod;
import com.stripe.model.SetupIntent;
import com.stripe.model.Token;
import com.stripe.param.PaymentIntentCreateParams;
import com.stripe.param.PaymentMethodListParams;
import com.stripe.model.PaymentMethodCollection;
import com.stripe.model.PaymentSource;

import springData.domain.StripeCustomer;
import springData.domain.Payment;
import springData.domain.User;
import springData.repository.StripeCustomerRepository;

@Service
public class StripeService {

   private static final Logger LOGGER = LoggerFactory.getLogger(StripeService.class);

   @Autowired StripeCustomerRepository stripeCustomerRepo;

   @Value("${stripe.secretKey}")
   private String API_SECRET_KEY;

   @Autowired
   public StripeService() {
      //Stripe.apiKey = API_SECRET_KEY;
      Stripe.apiKey = "sk_test_gU5GhJRhS7Os2ujZdmLlAA1e009c6iReYK";
   }

   public Charge chargeCard(User user, Payment payment) throws Exception {
      Map<String, Object> chargeParams = new HashMap<String, Object>();
      chargeParams.put("amount", (int)(55 * 100));
      chargeParams.put("currency", "gbp");
      chargeParams.put("customer", user.getStripeCustomer().getTokenID());

      Charge charge = Charge.create(chargeParams);
      return charge;
   }

   //Creates new customer and returns token
   public Customer createStripeCustomer(User user) throws Exception {
      // Customer creation parameters
      Map<String, Object> customerParams = new HashMap<>();
      customerParams.put("email", user.getUsername());
      customerParams.put("name", user.getFirstName() + " " + user.getLastName());

      //Create Customer via Stripe API call
      Customer customer = Customer.create(customerParams);

      //Store Stripe Customer ID
      StripeCustomer stripeCustomer = new StripeCustomer();
      stripeCustomer.setTokenID(customer.getId());
      stripeCustomer.setUser(user);
      stripeCustomerRepo.save(stripeCustomer);

      System.err.println("Customer info: "+customer.getId());
      user.setStripeCustomer(stripeCustomer);

      return customer;
   }

   //Retrieve customer using tokenID
   public Customer retriveStripeCustomer(User user) throws StripeException {
      //Retrieve Stripe customer using ID
      Customer customer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      Gson gson = new GsonBuilder().setPrettyPrinting().create();
      System.out.println(gson.toJson(customer));

      return customer;
   }

   //Delete customer using tokenID
   public Customer deleteStripeCustomer(User user) throws StripeException {
      //Retrieve Stripe customer using ID
      Customer customer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      Customer deletedCustomer = customer.delete();

      return deletedCustomer;
   }

   public String addCard(User user, String stripeToken) throws StripeException {
      //Retrieve Stripe customer using ID
      Customer existingCustomer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      //Retrieve token generated by JavaScript client
      Token token = Token.retrieve(stripeToken);

      //Retrieve customer's stored cards
      List<Card> stripeCardsList = getCards(user);

      boolean cardNotFound = true;

      //Check if card is already stored
      if(stripeCardsList.size() != 0) {
         for(int i = 0; i < stripeCardsList.size(); i++) {
            //Get token fingerprint
            Card storedCard = stripeCardsList.get(i);

            //Compare card Fingerprint
            if(storedCard.getFingerprint().equals(token.getCard().getFingerprint())) {
               //Card is already stored
               cardNotFound = false;
               break;
            }
         }
      }
      //Add new card
      if(cardNotFound) {
         Map<String, Object> source = new HashMap<String, Object>();
         source.put("source", token.getId());

         //Add card to Stripe sources
         existingCustomer.getSources().create(source);

         return "Success: Card added.";
      }
      else {
         return "Error: Card already exists!";
      }
   }

   //Retrieve cards stored on Stripe
   public List<Card> getCards(User user) throws StripeException {
      //Retrieve Stripe customer using ID
      Customer existingCustomer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      //Stripe API call request parameters
      Map<String, Object> params = new HashMap<>();
      params.put("object", "card");

      //List of cards to return
      List<Card> customerCards = new ArrayList<>();

      //Stored payment sources
      List<PaymentSource> paymentSources = existingCustomer.getSources().getData();

      //Retrieve source and cast to Card object
      for (int i = 0; i < paymentSources.size(); i++) {
         PaymentSource card = paymentSources.get(i);
         Card getCard = (Card) existingCustomer.getSources().retrieve(card.getId());
         customerCards.add(getCard);
      }
      return customerCards;
   }

   //Re card using cardID
   public Card removeCard(User user, String cardID) throws StripeException {
      //Retrieve customer from Stripe
      Customer customer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      //Retrieve card from Stripe using stored cardID
      Card card = (Card) customer.getSources().retrieve(cardID);

      //Call Stripe to delete card
      Card deletedCard = card.delete();

      LOGGER.info("Card deleted: " + cardID);

      return deletedCard;
   }

   public Map<String, String> saveCardForLater(User user, String customerID) throws Exception {
      //Stripe API call request parameters
      Map<String, Object> customerParams = new HashMap<String, Object>();
      Customer customer = Customer.create(customerParams);

      Stripe.apiKey = API_SECRET_KEY;

      Map<String, Object> params = new HashMap<>();
      params.put("customer", customer.getId());
      SetupIntent intent = SetupIntent.create(params);

      Map<String, String> map = new HashMap<String, String>();
      map.put("client_secret", intent.getClientSecret());

      return map;
   }

   public void chargeLater(User user, double amount) throws Exception {
      PaymentMethodListParams listParams = new PaymentMethodListParams.Builder()
            .setCustomer(user.getStripeCustomer().getTokenID())
            .setType(PaymentMethodListParams.Type.CARD)
            .build();

      PaymentMethodCollection paymentMethods = PaymentMethod.list(listParams);

      PaymentIntentCreateParams createParams = new PaymentIntentCreateParams.Builder()
            .setCurrency("gbp")
            .setAmount((long) 1099)
            .setPaymentMethod("{{PAYMENT_METHOD_ID}}")
            .setCustomer(user.getStripeCustomer().getTokenID())
            .setConfirm(true)
            .setOffSession(true)
            .build();
      try {
         PaymentIntent.create(createParams);
      } catch (CardException err) {
         // Error code will be authentication_required if authentication is needed
         System.out.println("Error code is : " + err.getCode());

         String paymentIntentId = err.getStripeError().getPaymentIntent().getId();
         PaymentIntent paymentIntent = PaymentIntent.retrieve(paymentIntentId);
         System.out.println(paymentIntent.getId());
      }
   }
}
//StripeService
