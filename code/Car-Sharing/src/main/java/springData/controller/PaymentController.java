package springData.controller;

import java.security.Principal;
import java.util.List;

import com.stripe.exception.StripeException;
import com.stripe.model.Card;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import springData.constants.Constants;
import springData.domain.User;
import springData.repository.UserRepository;
import springData.services.StripeService;

@Controller
@RequestMapping("/payment")
public class PaymentController {

   private static final Logger LOGGER = LoggerFactory.getLogger(PaymentController.class);

   @Autowired private StripeService stripeService;
   @Autowired private UserRepository userRepo;

   @Value("${stripe.publicKey}")
   private String stripePublicKey;

   /**
    * Displays the user's payment card(s) & allows user to add card
    *
    * @param model
    * @param principal
    * @return
    */
   @GetMapping("/wallet")
   public String wallet(Model model, Principal principal) {
      //Get Logged in User
      User user = userRepo.findByUsername(principal.getName());

      List<Card> storedCards = null;

      try {
         //User has no Stripe ID
         if (user.getStripeCustomer() == null) {
            //Create Stripe customer
            stripeService.createStripeCustomer(user);
         }
         //Card summaries
         storedCards = stripeService.getCards(user);
      } catch (StripeException e) {
         // Notification Message
         String notificationHeader = Constants.NOTIFICATION_ERROR;
         String notificationBody = "Unable to retrieve details";

         model.addAttribute("notificationHeader", notificationHeader);
         model.addAttribute("notificationBody", notificationBody);

         LOGGER.info(e.toString());
      }
      model.addAttribute("storedCards", storedCards);
      model.addAttribute("stripePublicKey", stripePublicKey);
      model.addAttribute("username", user.getFirstName() + " " + user.getLastName());

      return "/user/wallet";
   }

   /**
    * Adds new payment card to user's payment sources
    *
    * @param model
    * @param principal
    * @param request - HttpServeletRequest containing token generated by Stripe.js
    * @param redirectAttributes - adds model attributes for Post mappings
    * @return
    */
   @PostMapping("/add-card")
   public String addCard(Model model, Principal principal, HttpServletRequest request,
           RedirectAttributes redirectAttributes) {

      // Get Logged in User
      User user = userRepo.findByUsername(principal.getName());

      //  Retrieve generated token
      String stripeToken = request.getParameter("stripeToken");

      // Notification message
      String notificationHeader = "";
      String notificationBody;

      // Add Card
      try {
         notificationHeader = stripeService.addCard(user, stripeToken);
         if (notificationHeader.equalsIgnoreCase("Success")) {
            notificationBody = "Card added";
         }
         else {
            notificationBody = "Card already exists";
         }
      } catch (StripeException e) {
         notificationBody = "Error: Card declined";
         e.printStackTrace();
      }
      userRepo.save(user);

      redirectAttributes.addFlashAttribute("notificationHeader", notificationHeader);
      redirectAttributes.addFlashAttribute("notificationBody", notificationBody);

      LOGGER.info(notificationBody + " for: " + user.getUsername());

      return "redirect:/payment/wallet";
   }

   /**
    * Removes selected payment card from user's payment sources
    *
    * @param cardId
    * @param model
    * @param principal
    * @param redirectAttributes
    * @return
    * @throws StripeException
    */
   @GetMapping("/remove-card/{cardId}")
   public String removeCard(@PathVariable String cardId, Model model, Principal principal,
           RedirectAttributes redirectAttributes) {

      //Get Logged in User
      User user = userRepo.findByUsername(principal.getName());

      // Notification message
      String notificationHeader = "Warning";
      String notificationBody = "Can't remove card during request";

      // Can't remove card during request
      if (user.isActive()) {
         notificationHeader = Constants.NOTIFICATION_WARNING;
         notificationBody = "Can't remove card during request";

         LOGGER.info("User in request: " + user.getUsername());
      } else {
         // Remove card
         try {
            stripeService.removeCard(user, cardId);
         } catch (StripeException e) {
            LOGGER.info(e.toString());
         }
         userRepo.save(user);

         notificationHeader = Constants.NOTIFICATION_SUCCESS;
         notificationBody = "Card Removed";

         LOGGER.info("Card removed by " + user.getUsername());
      }
      redirectAttributes.addFlashAttribute("notificationHeader", notificationHeader);
      redirectAttributes.addFlashAttribute("notificationBody", notificationBody);

      return "redirect:/payment/wallet";
   }

}
// PaymentController
