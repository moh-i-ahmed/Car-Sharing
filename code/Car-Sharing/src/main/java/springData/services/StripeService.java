package springData.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Card;
import com.stripe.model.Customer;
import com.stripe.model.Invoice;
import com.stripe.model.InvoiceItem;
import com.stripe.model.Token;
import com.stripe.model.PaymentSource;

import springData.domain.StripeCustomer;
import springData.domain.User;
import springData.repository.StripeCustomerRepository;
import springData.repository.UserRepository;

@Service
public class StripeService {

   private static final Logger LOGGER = LoggerFactory.getLogger(StripeService.class);

   @Autowired UserRepository userRepo;
   @Autowired StripeCustomerRepository stripeCustomerRepo;

   @Value("${stripe.secretKey}")
   private String API_SECRET_KEY;

   @Autowired
   public StripeService() {
      Stripe.apiKey = "sk_test_gU5GhJRhS7Os2ujZdmLlAA1e009c6iReYK";
   }

   /**
    * Creates new Stripe customer & returns the customer entity
    *
    * @param user - user for whom entity is being created
    * @return - Stripe Customer entity
    * @throws StripeException
    */
   public Customer createStripeCustomer(User user) throws StripeException {
      // Customer building parameters
      Map<String, Object> customerParams = new HashMap<>();
      customerParams.put("email", user.getUsername());
      customerParams.put("name", user.getFirstName() + " " + user.getLastName());

      // Create Customer via Stripe API call
      Customer customer = Customer.create(customerParams);

      // Store Stripe Customer ID
      StripeCustomer stripeCustomer = new StripeCustomer();
      stripeCustomer.setTokenID(customer.getId());
      stripeCustomer.setUser(user);
      stripeCustomerRepo.save(stripeCustomer);

      user.setStripeCustomer(stripeCustomer);
      userRepo.save(user);

      return customer;
   }

   /**
    * Retrieves Stripe Customer using the stored customerID
    *
    * @param user - user for whom customerID is being retrieved
    * @return - Stripe Customer entity
    * @throws StripeException
    */
   public Customer retriveStripeCustomer(User user) throws StripeException {
      if (user.getStripeCustomer() == null) {
         return createStripeCustomer(user);
      }
      // Retrieve Stripe customer using ID
      Customer customer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      return customer;
   }

   /**
    * Delete Stripe Customer using stored customerID
    *
    * @param user - user being deleted
    * @return - empty Stripe Customer entity
    * @throws StripeException
    */
   public Customer deleteStripeCustomer(User user) {
      // Retrieve Stripe customer using ID
      Customer customer;
      Customer deletedCustomer = null;
      try {
         customer = Customer.retrieve(user.getStripeCustomer().getTokenID());
         deletedCustomer = customer.delete();
      } catch (StripeException e) {
         e.printStackTrace();
      }
      return deletedCustomer;
   }

   /**
    * Add card payment method to attached Stripe Customer
    *
    * @param user - user for whom card is being added
    * @param stripeToken - token generated by stripe.js element
    * @return - status message; Success or Error
    * @throws StripeException
    */
   public String addCard(User user, String stripeToken) throws StripeException {
      // Retrieve Stripe customer using ID
      Customer existingCustomer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      // No StripeCustomer found
      if (existingCustomer == null) {
         this.createStripeCustomer(user);
         existingCustomer = Customer.retrieve(user.getStripeCustomer().getTokenID());
      }

      // Retrieve token generated by JavaScript client
      Token token = Token.retrieve(stripeToken);

      // Retrieve customer's stored cards
      List<Card> stripeCardsList = getCards(user);

      boolean cardNotFound = true;

      // Check if card is already stored
      if (stripeCardsList.size() != 0) {
         for (int i = 0; i < stripeCardsList.size(); i++) {
            // Get token fingerprint
            Card storedCard = stripeCardsList.get(i);

            // Compare card Fingerprint
            if (storedCard.getFingerprint().equals(token.getCard().getFingerprint())) {
               //Card is already stored
               cardNotFound = false;
               break;
            }
         }
      }
      //Add new card
      if (cardNotFound) {
         Map<String, Object> source = new HashMap<String, Object>();
         source.put("source", token.getId());

         // Add card to Stripe sources
         existingCustomer.getSources().create(source);

         return "Success";
      }
      else {
         return "Error";
      }
   }

   /**
    * Checks for payment sources attached Stripe Customer
    *
    * @param user - user being checked
    * @return boolean - true/false
    * @throws StripeException
    */
   public boolean hasPaymentSource(User user) throws StripeException {
      // Retrieve Stripe customer using ID
      Customer existingCustomer = retriveStripeCustomer(user);

      // Retrieve customer's stored cards
      List<Card> stripeCardsList = getCards(user);

      // No StripeCustomer or cards found
      if (stripeCardsList.size() == 0 || existingCustomer == null) {
         return false;
      }
      else {
         return true;
      }
   }

   /**
    * Retrieves list of cards attached to Stripe Customer
    *
    * @param user - user for whom cards are attached
    * @return - List<Card> attached to Stripe Customer
    * @throws StripeException
    */
   public List<Card> getCards(User user) throws StripeException {
      // Retrieve Stripe customer using ID
      Customer existingCustomer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      // Stripe API call request parameters
      Map<String, Object> params = new HashMap<>();
      params.put("object", "card");

      // List of cards to return
      List<Card> customerCards = new ArrayList<>();

      // Stored payment sources
      List<PaymentSource> paymentSources = existingCustomer.getSources().getData();

      // Retrieve source and cast to Card object
      for (int i = 0; i < paymentSources.size(); i++) {
         PaymentSource card = paymentSources.get(i);
         Card getCard = (Card) existingCustomer.getSources().retrieve(card.getId());
         customerCards.add(getCard);
      }
      return customerCards;
   }

   /**
    * Removes payment card attached to Stripe Customer
    *
    * @param user - user for whom card is being removed
    * @param cardID - payment card Stripe ID
    * @return - empty Stripe Card entity
    * @throws StripeException
    */
   public Card removeCard(User user, String cardID) throws StripeException {
      // Retrieve customer from Stripe
      Customer customer = Customer.retrieve(user.getStripeCustomer().getTokenID());

      // Retrieve card from Stripe using stored cardID
      Card card = (Card) customer.getSources().retrieve(cardID);

      // Call Stripe to delete card
      Card deletedCard = card.delete();

      LOGGER.info("Card deleted: " + cardID);

      return deletedCard;
   }

   /**
    * Creates Invoice for payment that is sent to the user
    *
    * @param user - user being charged
    * @param paymentAmount - amount due
    * @throws StripeException
    */
   public String createInvoice(User user, double paymentAmount) throws StripeException {
      // Invoice building parameters
      Map<String, Object> invoiceItemParams = new HashMap<String, Object>();
      invoiceItemParams.put("customer", user.getStripeCustomer().getTokenID());
      invoiceItemParams.put("amount", (int) paymentAmount);
      invoiceItemParams.put("currency", "gbp");
      invoiceItemParams.put("description", "One-time");

      InvoiceItem.create(invoiceItemParams);

      // Create Invoice item & add customerID
      Map<String, Object> invoiceParams = new HashMap<String, Object>();
      invoiceParams.put("customer", user.getStripeCustomer().getTokenID());
      invoiceParams.put("auto_advance", true);
      invoiceParams.put("collection_method", "charge_automatically");
      invoiceParams.put("description", "Car Sharing Reqeust");

      Invoice invoice = Invoice.create(invoiceParams);
      return invoice.getId();
   }

}
// StripeService
